// Copyright (c) 2009 Las Cumbres Observatory (www.lcogt.net)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Author: Eric Saunders (esaunders@lcogt.net)
//
// Protobuf definition file for the HelloWorld service.

package server.status;
option py_generic_services = true;

message TCPRequest
{
   optional string client_ip = 1;
   optional string user_name = 2;
   optional string user_pass = 3;
}

message TCPResponse 
{
  required uint64 request_total = 1;
  required uint64 read_timeout = 2;
  required float max_request_time = 3;
  required float min_request_time = 4;
  required float avg_request_time = 5;
}

message RPCResponse
{
  required uint64 request_total = 1;
  required uint64 bad_request = 2;
  repeated ServiceNotFound service_not_found = 3;
  repeated MethodNotFound method_not_found = 4;
  repeated ServiceStatus service_status = 5;

  message ServiceNotFound{
   required string service_name = 1;
   required uint64 count = 2;
  }
  message MethodNotFound{
   required string method_name = 1;
   required uint64 count = 2;
  }
  message ServiceStatus{
   required string service_name = 1;
   required float min_time = 2;
   required float max_time = 3;
   required float avg_time = 4;
   required float request_total = 5;
  }
}

message RPCRequest
{
   optional string client_ip = 1;
   optional string user_name = 2;
   optional string user_pass = 3;
}

service StatusService 
{
  rpc TCPStatus(TCPRequest) returns(TCPResponse);
  rpc RPCStatus(RPCRequest) returns(RPCResponse);
}
